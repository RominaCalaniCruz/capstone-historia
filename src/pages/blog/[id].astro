---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';
import { getFormattedDate } from '@/utils/all';

export async function getStaticPaths() {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { id: post.id },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo } = post.data;
const { Content, headings } = await render(post);
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} pageType="article" showHeader={false}>
    <article class="mb-8 sm:mb-8">
        <header class="mb-8">
            <h1
                class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight bg-gradient-to-r from-green-600 to-green-100 dark:from-purple-800 dark:to-purple-900
    bg-[length:100%_3px] bg-left-bottom bg-no-repeat
    transition-[background-size] duration-500"
            >
                {title}
            </h1>
            <div class="mt-4 text-sm">
                <time class="text-sm" datetime={post.data.publishDate.toISOString()}>
                    {getFormattedDate(post.data.publishDate)}
                </time>
            </div>
        </header>

        <!-- Contenedor de la Tabla de Contenidos -->
        <aside id="toc-container" class="hidden mb-6 p-4 border-l-4 border-green-500 bg-gray-100 dark:bg-gray-800 dark:border-purple-600">
            <h2 class="text-lg font-semibold">Tabla de Contenidos</h2>
            <ul id="toc-list" class="list-none ml-2"></ul>
        </aside>

        <div id="post-content" class="max-w-none prose prose-dante sm:prose-lg">
        {post.data.image && <img src={post.data.image} alt={post.data.title} class="w-full h-[250px] md:h-[350px] lg:h-[450px] object-cover rounded-md" />}
        <div class="max-w-none prose prose-dante sm:prose-lg">
            <Content />
        </div>

        <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">
                Compartir
            </Button>
        </div>
    </article>
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        generateTOC();

        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLElement | null;
        if (copyUrlButton) {
            copyUrlButton.addEventListener('click', () => copyUrl(copyUrlButton));
        }
    });

    function generateTOC() {
        const content = document.getElementById("post-content") as HTMLElement | null;
        const tocContainer = document.getElementById("toc-container") as HTMLElement | null;
        const tocList = document.getElementById("toc-list") as HTMLElement | null;

        if (!content || !tocList || !tocContainer) return;

        const headers = content.querySelectorAll("h2, h3");

        if (headers.length === 0) return;

        tocContainer.classList.remove("hidden");

        headers.forEach((header) => {
            if (!(header instanceof HTMLElement) || !header.textContent) return;

            const id = header.textContent
                .toLowerCase()
                .replace(/\s+/g, '-')
                .replace(/[^\w-]/g, '');
            header.id = id;

            const listItem = document.createElement("li");
            listItem.classList.add(header.tagName === "H3" ? "ml-4" : "ml-0");

            const link = document.createElement("a");
            link.href = `#${id}`;
            link.textContent = header.textContent;
            link.classList.add("text-main", "hover:underline");

            listItem.appendChild(link);
            tocList.appendChild(listItem);
        });
    }

    async function copyUrl(button: HTMLElement) {
        if (!button) return;

        const url = button.getAttribute('data-url') || '';
        const label = button.innerText;

        try {
            await navigator.clipboard.writeText(url);
            button.innerText = 'Copied';
            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        } catch (error) {
            console.error("Error copying URL:", error);
        }
    }
</script>


